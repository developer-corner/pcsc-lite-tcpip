--- a/src/winscard_clnt.c	2021-06-01 21:39:11.000000000 +0200
+++ b/src/winscard_clnt.c	2022-02-16 12:10:24.263108179 +0100
@@ -11,6 +11,8 @@
  *  Ludovic Rousseau <ludovic.rousseau@free.fr>
  * Copyright (C) 2009
  *  Jean-Luc Giraud <jlgiraud@googlemail.com>
+ * Copyright (C) 2022
+ *  Ingo A. Kubbilun <ingo.kubbilun@gmail.com> (TCP/IP+TLS)
  *
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
@@ -3509,8 +3511,13 @@
 	LONG rv;
 	struct stat statBuffer;
 	char *socketName;
+	int is_tcp_ip;
+
+	socketName = getSocketName(&is_tcp_ip);
+
+	if (is_tcp_ip)
+		return SCARD_S_SUCCESS; /* just return SCARD_S_SUCCESS here, we do not want to probe the TCP/IP server */
 
-	socketName = getSocketName();
 	rv = stat(socketName, &statBuffer);
 
 	if (rv != 0)
--- a/src/winscard_msg.c	2020-08-05 13:01:32.000000000 +0200
+++ b/src/winscard_msg.c	2022-02-16 12:09:08.510149909 +0100
@@ -7,6 +7,8 @@
  *  Damien Sauveron <damien.sauveron@labri.fr>
  * Copyright (C) 2002-2010
  *  Ludovic Rousseau <ludovic.rousseau@free.fr>
+ * Copyright (C) 2022
+ *  Ingo A. Kubbilun <ingo.kubbilun@gmail.com> (TCP/IP+TLS)
  *
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
@@ -50,6 +52,7 @@
 #include <sys/time.h>
 #include <sys/un.h>
 #include <sys/ioctl.h>
+#include <netdb.h>
 #include <errno.h>
 #include <poll.h>
 #include <stdio.h>
@@ -82,7 +85,9 @@
 
 #define member_size(type, member) sizeof(((type *)0)->member)
 
-char *getSocketName(void)
+static int is_tcpip_socket = 0;
+
+char *getSocketName(/*@out@*/int *is_tcpip)
 {
 	static char socketName[member_size(struct sockaddr_un, sun_path)];
 
@@ -90,6 +95,19 @@
 	{
 		/* socket name not yet initialized */
 		char *socketNameEnv;
+		char *host = getenv("PCSC_HOST_OR_IP");
+		char *s_port = getenv("PCSC_TCP_PORT");
+
+		if (NULL != host && NULL != s_port)
+		{
+			snprintf(socketName, sizeof(socketName), "%s|%s",
+					host, s_port); /* use a pipe symbol
+					here because IPv6 addresses use a
+					colon ':', too */
+			is_tcpip_socket = 1;
+			*is_tcpip = is_tcpip_socket;
+			return socketName;
+		}
 
 		socketNameEnv = getenv("PCSCLITE_CSOCK_NAME");
 		if (socketNameEnv)
@@ -101,6 +119,8 @@
 		socketName[sizeof socketName -1] = '\0';
 	}
 
+	*is_tcpip = is_tcpip_socket;
+
 	return socketName;
 }
 
@@ -123,27 +143,76 @@
 	struct sockaddr_un svc_addr;
 	int ret;
 	char *socketName;
+	int is_tcp_ip;
+
+	socketName = getSocketName(&is_tcp_ip);
 
-	ret = socket(PF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0);
-	if (ret < 0)
+	if (0 == is_tcp_ip)
 	{
-		Log2(PCSC_LOG_CRITICAL, "Error: create on client socket: %s",
-			strerror(errno));
-		return -1;
-	}
-	*pdwClientID = ret;
+		ret = socket(PF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0);
+		if (ret < 0)
+		{
+			Log2(PCSC_LOG_CRITICAL, "Error: create on client socket: %s",
+				strerror(errno));
+			return -1;
+		}
+		*pdwClientID = ret;
 
-	socketName = getSocketName();
-	svc_addr.sun_family = AF_UNIX;
-	strncpy(svc_addr.sun_path, socketName, sizeof(svc_addr.sun_path));
+		svc_addr.sun_family = AF_UNIX;
+		strncpy(svc_addr.sun_path, socketName, sizeof(svc_addr.sun_path));
 
-	if (connect(*pdwClientID, (struct sockaddr *) &svc_addr,
+		if (connect(*pdwClientID, (struct sockaddr *) &svc_addr,
 			sizeof(svc_addr.sun_family) + strlen(svc_addr.sun_path) + 1) < 0)
+		{
+			Log3(PCSC_LOG_CRITICAL, "Error: connect to client socket %s: %s",
+				socketName, strerror(errno));
+			(void)close(*pdwClientID);
+			return -1;
+		}
+	}
+	else /* TCP/IP stuff (IPv4 and IPv6 supported) */
 	{
-		Log3(PCSC_LOG_CRITICAL, "Error: connect to client socket %s: %s",
-			socketName, strerror(errno));
-		(void)close(*pdwClientID);
-		return -1;
+		struct addrinfo     hints;
+		struct addrinfo    *result, *rp;
+		int                 s, sfd = -1;
+		char               *host = getenv("PCSC_HOST_OR_IP");
+		char               *s_port = getenv("PCSC_TCP_PORT");
+
+		memset(&hints, 0, sizeof(struct addrinfo));
+
+		hints.ai_family   =  AF_UNSPEC; /* Do not specify AF_INET or AF_INET6 here because both are supported */
+		hints.ai_socktype = SOCK_STREAM; /* We want a TCP socket */
+		hints.ai_flags    = AI_PASSIVE;  /* All interfaces */
+
+		s = getaddrinfo(host, s_port, &hints, &result);
+		if (0 != s)
+		{
+			Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to execute getaddrinfo: %s", strerror(errno));
+			return -1;
+		}
+
+		for (rp = result; rp != NULL; rp = rp->ai_next)
+		{
+			sfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
+			if (sfd == -1)
+				continue;
+
+			if (0 == connect(sfd, rp->ai_addr, (int)rp->ai_addrlen))
+				break; /* ok */
+
+			close(sfd);
+		}
+
+		if (rp == NULL)
+		{
+			freeaddrinfo(result);
+			Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to connect to the specified host or IP: %s", host);
+			return -1;
+		}
+
+		freeaddrinfo(result);
+
+		*pdwClientID = sfd;
 	}
 
 	ret = fcntl(*pdwClientID, F_GETFL, 0);
--- a/src/winscard_msg.h	2021-02-16 17:25:35.000000000 +0100
+++ b/src/winscard_msg.h	2022-02-16 12:00:41.340638890 +0100
@@ -7,6 +7,8 @@
  *  Damien Sauveron <damien.sauveron@labri.fr>
  * Copyright (C) 2002-2010
  *  Ludovic Rousseau <ludovic.rousseau@free.fr>
+ * Copyright (C) 2022
+ *  Ingo A. Kubbilun <ingo.kubbilun@gmail.com> (TCP/IP+TLS)
  *
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
@@ -279,7 +281,7 @@
 	int32_t ListenExistingSocket(int fd);
 	int32_t ProcessEventsServer(/*@out@*/ uint32_t *);
 #else
-	char *getSocketName(void);
+	char *getSocketName(int *is_tcpip);
 	int32_t ClientSetupSession(uint32_t *);
 	void ClientCloseSession(uint32_t);
 	LONG MessageReceiveTimeout(uint32_t command, /*@out@*/ void *buffer,
--- a/src/winscard_msg_srv.c	2020-08-05 13:01:32.000000000 +0200
+++ b/src/winscard_msg_srv.c	2022-02-16 12:17:48.347671028 +0100
@@ -7,6 +7,8 @@
  *  Damien Sauveron <damien.sauveron@labri.fr>
  * Copyright (C) 2002-2010
  *  Ludovic Rousseau <ludovic.rousseau@free.fr>
+ * Copyright (C) 2022
+ *  Ingo A. Kubbilun <ingo.kubbilun@gmail.com> (TCP/IP+TLS)
  *
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
@@ -50,7 +52,11 @@
 #include <sys/time.h>
 #include <sys/un.h>
 #include <sys/ioctl.h>
+#include <netdb.h>
+#include <arpa/inet.h> /* required for inet_ntop */
+#include <netinet/tcp.h> /* required by setting of TCP keep alive */
 #include <errno.h>
+#include <stdlib.h>
 #include <stdio.h>
 #include <time.h>
 #include <string.h>
@@ -68,9 +74,10 @@
 #include "winscard_msg.h"
 
 /**
- * Socket to a file, used for clients-server comminication.
+ * Socket to a file, used for clients-server communication.
  */
-static int commonSocket = 0;
+static int commonSocket = -1;	///< this is the UNIX domain server socket
+static int commonSocketIP = -1;	///< this is the IP server socket (optional)
 extern char AraKiri;
 
 /**
@@ -78,25 +85,97 @@
  *
  * Called by \c ProcessEventsServer().
  *
+ * @param[in]  sock        server socket (either UDS or TCP/IP)
  * @param[out] pdwClientID Connection ID used to reference the Client.
  *
  * @return Error code.
  * @retval 0 Success.
  * @retval -1 Can not establish the connection.
  */
-static int ProcessCommonChannelRequest(/*@out@*/ uint32_t *pdwClientID)
+static int ProcessCommonChannelRequest(/*@in@*/ int sock, /*@out@*/ uint32_t *pdwClientID)
 {
 	socklen_t clnt_len;
-	int new_sock;
+	int new_sock = -1;
 	struct sockaddr_un clnt_addr;
+	struct sockaddr_storage clnt_addr_ip;
+	char *keepalive_env;
 
-	clnt_len = sizeof(clnt_addr);
+	if (sock == commonSocket)
+	{
+		clnt_len = sizeof(clnt_addr);
+		new_sock = accept(sock, (struct sockaddr *) &clnt_addr, &clnt_len);
+	}
+	else
+	if (sock == commonSocketIP)
+	{
+		clnt_len = sizeof(clnt_addr_ip);
+		new_sock = accept(sock, (struct sockaddr *)&clnt_addr_ip, &clnt_len);
+		if (-1 != new_sock)
+		{
+			char client[256];
+
+			memset(client, 0, sizeof(client));
+			(void)inet_ntop(clnt_addr_ip.ss_family, AF_INET6 == clnt_addr_ip.ss_family ?
+				(const void *)&((struct sockaddr_in6 *)&clnt_addr_ip)->sin6_addr :
+				(const void *)&((struct sockaddr_in *)&clnt_addr_ip)->sin_addr, client, sizeof(client)-1);
+
+			Log2(PCSC_LOG_DEBUG, "New client connect from IP: %s", client);
+
+			/* configure TCP keepalive, not portable, Linux only! */
+
+			keepalive_env = getenv("PCSC_TCP_KEEPALIVE"); /* format: "<idle seconds>,<seconds between probes>,<number of probes before dying>", e.g. 10,3,10 or 1,1,10 */
+
+			if (NULL != keepalive_env)
+			{
+				int so_flag = 1, so_idle_time, so_interval, so_probes;
+				char keepalive[64], *p[2] = { NULL, NULL };
+
+				strncpy(keepalive,keepalive_env,sizeof(keepalive));
+				keepalive[sizeof(keepalive) - 1] = 0;
+
+				p[0] = strchr(keepalive, ',');
+				if (NULL != p[0])
+					p[1] = strchr(p[0] + 1, ',');
+
+				if (NULL != p[1])
+				{
+					p[0] = 0;
+					p[1] = 0;
+
+					so_idle_time = atoi(keepalive);
+					so_interval = atoi(p[0] + 1);
+					so_probes = atoi(p[1] + 1);
+
+					if (so_idle_time > 0 && so_interval > 0 && so_probes > 0)
+					{
+						if (-1 == setsockopt(new_sock, SOL_SOCKET, SO_KEEPALIVE, &so_flag, sizeof(so_flag))) /* enable keepalive on this socket */
+							goto ErrorExit;
 
-	if ((new_sock = accept(commonSocket, (struct sockaddr *) &clnt_addr,
-				&clnt_len)) < 0)
+						if (-1 == setsockopt(new_sock, IPPROTO_TCP, TCP_KEEPIDLE, &so_idle_time, sizeof(so_idle_time))) /* idle time in seconds before keepalive probes are being sent */
+							goto ErrorExit;
+
+						if (-1 == setsockopt(new_sock, IPPROTO_TCP, TCP_KEEPINTVL, &so_interval, sizeof(so_interval))) /* time in seconds between individual keepalive probes */
+							goto ErrorExit;
+
+						if (-1 == setsockopt(new_sock, IPPROTO_TCP, TCP_KEEPCNT, &so_probes, sizeof(so_probes))) /* maximum number of probes sent before dropping the connection */
+							goto ErrorExit;
+					}
+				}
+			}
+		}
+	}
+	else
 	{
-		Log2(PCSC_LOG_CRITICAL, "Accept on common socket: %s",
-			strerror(errno));
+	  Log1(PCSC_LOG_CRITICAL, "Unable to execute accept because socket unknown (INTERNAL ERROR)");
+	  return -1;
+	}
+
+	if (new_sock < 0)
+	{
+ErrorExit:
+		if (new_sock >= 0)
+			close(new_sock);
+		Log2(PCSC_LOG_CRITICAL, "Accept on common socket: %s", strerror(errno));
 		return -1;
 	}
 
@@ -105,6 +184,115 @@
 	return 0;
 }
 
+static int32_t InitializeTCPIPSocket(void)
+{
+	char *host;
+	int tcp_port;
+
+	/*
+	 * If the environment variables PCSC_HOST_OR_IP and PCSC_TCP_PORT are defined, then read it and use it
+	 */
+
+	host = getenv("PCSC_HOST_OR_IP");
+
+	if (NULL != host)
+	{
+		char *s_port = getenv("PCSC_TCP_PORT");
+
+		if (NULL != s_port)
+		{
+			tcp_port = atoi(s_port);
+			if (tcp_port >=0 && tcp_port <= 65535)
+			{
+				struct addrinfo hints;
+				struct addrinfo *result, *rp;
+				int s, sfd = -1, flag;
+				struct linger so_linger;
+
+				memset(&hints, 0, sizeof(struct addrinfo));
+
+				hints.ai_family   =  AF_UNSPEC; /* Do not specify AF_INET or AF_INET6 here because both are supported */
+				hints.ai_socktype = SOCK_STREAM; /* We want a TCP socket */
+				hints.ai_flags    = AI_PASSIVE;  /* All interfaces */
+
+				s = getaddrinfo(host, s_port, &hints, &result);
+				if (0 != s)
+				{
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to execute getaddrinfo: %s", strerror(errno));
+					return -1;
+				}
+
+				for (rp = result; rp != NULL; rp = rp->ai_next)
+				{
+					sfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
+					if (sfd == -1)
+						continue;
+
+					if (0 == bind(sfd, rp->ai_addr, (int)rp->ai_addrlen))
+						break; /* ok */
+
+					close(sfd);
+				}
+
+				if (rp == NULL)
+				{
+					freeaddrinfo(result);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to bind to the specified host or IP: %s", host);
+					return -1;
+				}
+
+				freeaddrinfo(result);
+
+				/* make socket non-blocking */
+
+				flag = fcntl(sfd, F_GETFL, 0);
+				if (flag == -1)
+				{
+					close(sfd);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to make the TCP/IP socket non-blocking: %s", host);
+					return -1;
+				}
+				flag |= O_NONBLOCK;
+				if (-1 == fcntl(sfd, F_SETFL, flag))
+				{
+					close(sfd);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to make the TCP/IP socket non-blocking: %s", host);
+					return -1;
+				}
+
+				flag = 1;
+				if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (int *)&flag, sizeof(flag)) < 0)
+				{
+					close(sfd);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to activate SO_REUSEADDR on the TCP/IP socket: %s", strerror(errno));
+					return -1;
+				}
+
+				so_linger.l_onoff  = 1; /* true, set linger time to 0 */
+				so_linger.l_linger = 0; /* linger time is 0, i.e. abort sockets on close */
+
+				if (0 != setsockopt(sfd, SOL_SOCKET, SO_LINGER, &so_linger, sizeof (so_linger)))
+				{
+					close(sfd);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to set SO_LINGER to zero on the TCP/IP socket: %s", strerror(errno));
+					return -1;
+				}
+
+				if (0 != listen(sfd, SOMAXCONN))
+				{
+					close(sfd);
+					Log2(PCSC_LOG_CRITICAL, "TCP/IP: unable to listen on the TCP/IP socket: %s", strerror(errno));
+					return -1;
+				}
+
+				commonSocketIP = sfd;
+			}
+		}
+	} // of host available
+
+return 0;
+}
+
 /**
  * @brief Prepares the communication channel used by the server to talk to the
  * clients.
@@ -152,6 +340,7 @@
 
 	if (listen(commonSocket, 1) < 0)
 	{
+	  close(commonSocket), commonSocket = -1;
 		Log2(PCSC_LOG_CRITICAL, "Unable to listen common socket: %s",
 			strerror(errno));
 		return -1;
@@ -162,6 +351,16 @@
 	 */
 	(void)chmod(PCSCLITE_CSOCK_NAME, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
 
+	/*
+	 * conditionally create a second socket for the TCP/IP communication
+	 */
+
+	if (0 != InitializeTCPIPSocket())
+	{
+    close(commonSocket), commonSocket = -1;
+    return -1;
+	}
+
 	return 0;
 }
 
@@ -187,6 +386,17 @@
 	}
 
 	commonSocket = fd;
+
+  /*
+   * conditionally create a second socket for the TCP/IP communication
+   */
+
+  if (0 != InitializeTCPIPSocket())
+  {
+    close(commonSocket), commonSocket = -1;
+    return -1;
+  }
+
 	return 0;
 }
 #endif
@@ -210,7 +420,7 @@
 INTERNAL int32_t ProcessEventsServer(uint32_t *pdwClientID)
 {
 	fd_set read_fd;
-	int selret;
+	int selret, max_sock;
 #ifdef DO_TIMEOUT
 	struct timeval tv;
 
@@ -224,8 +434,15 @@
 	 * Set up the bit masks for select
 	 */
 	FD_SET(commonSocket, &read_fd);
+	max_sock = commonSocket;
+
+	if (-1 != commonSocketIP)
+	{
+		FD_SET(commonSocketIP, &read_fd);
+		max_sock = commonSocketIP > commonSocket ? commonSocketIP : max_sock;
+	}
 
-	selret = select(commonSocket + 1, &read_fd, (fd_set *) NULL,
+	selret = select(max_sock + 1, &read_fd, (fd_set *) NULL,
 		(fd_set *) NULL,
 #ifdef DO_TIMEOUT
 		&tv
@@ -253,11 +470,22 @@
 	 */
 	if (FD_ISSET(commonSocket, &read_fd))
 	{
-		Log1(PCSC_LOG_DEBUG, "Common channel packet arrival");
-		if (ProcessCommonChannelRequest(pdwClientID) == -1)
+		Log1(PCSC_LOG_DEBUG, "Common channel packet arrival (UNIX domain socket)");
+		if (ProcessCommonChannelRequest(commonSocket, pdwClientID) == -1)
+		{
+			Log2(PCSC_LOG_ERROR,
+				"error in ProcessCommonChannelRequest (UNIX domain socket): %d", *pdwClientID);
+			return -1;
+		}
+	}
+	else
+	if ((-1 != commonSocketIP) && (FD_ISSET(commonSocketIP, &read_fd)))
+	{
+		Log1(PCSC_LOG_DEBUG, "Common channel packet arrival (TCP/IP socket)");
+		if (ProcessCommonChannelRequest(commonSocketIP, pdwClientID) == -1)
 		{
 			Log2(PCSC_LOG_ERROR,
-				"error in ProcessCommonChannelRequest: %d", *pdwClientID);
+				"error in ProcessCommonChannelRequest (TCP/IP socket): %d", *pdwClientID);
 			return -1;
 		}
 	}
